version: '3.7'

services:
  rabbit:
    image: "rabbitmq:3.6.14-management-alpine"
    environment:
      RABBITMQ_ERLANG_COOKIE: "BOOOOOOOOOOOOOOOOOOO"
      RABBITMQ_DEFAULT_USER: "docker"
      RABBITMQ_DEFAULT_PASS: "docker"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "15672:15672"
      - "5672:5672"
      - "5671:5671"
    volumes:
      - ./rabbit/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
      - ./rabbit/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./rabbit/initialize.sh:/initialize.sh
      - ./rabbit/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
      - ./volumes/rabbit:/var/lib/rabbitmq:rw

  sentry:
    image: sentry:9.1
    ports:
     - 9000:9000
    environment:
      SENTRY_REDIS_HOST: redis
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_SECRET_KEY: fe681f0e668df608e2028cd9b03fbde674aea65165b626ce64e6f75ba17c098797cb769402abf88fcd8823bd4a20da615235e8872e8fcbb09db13017c0008ded
      SENTRY_DB_NAME: sentry
      SENTRY_DB_USER: docker
      SENTRY_DB_PASSWORD: docker
    command: "/run_sentry.sh"
    volumes:
      - ./sentry/bootstrap.py:/bootstrap.py
      - ./sentry/create_db.py:/create_db.py
      - ./sentry/run_sentry.sh:/run_sentry.sh
    depends_on:
      - redis
      - postgres

  postgres:
    image: postgres:16
    shm_size: 2g
    ports:
      - 5432:5432
    volumes:
      - ./volumes/logs/postgres-16:/var/log/postgresql/:rw
      - ./volumes/postgres/data-16:/var/lib/postgresql/data:rw
    environment:
      POSTGRES_PASSWORD: docker
      POSTGRES_USER: docker
      POSTGRES_DBUSER: docker
      POSTGRES_DBPASS: docker

  pgadmin4:
    image: dpage/pgadmin4:5.5
    environment:
      PGADMIN_DEFAULT_EMAIL: docker@docker.com
      PGADMIN_DEFAULT_PASSWORD: docker
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - ./volumes/pgadmin/servers.json:/pgadmin4/servers.json:rw
      - ./volumes/pgadmin/pgpassfile:/pgpassfile:rw
    ports:
      - 25432:80
    depends_on:
      - postgres

  redis:
    image: redis:6
    command: "redis-server /etc/redis/redis.conf"
    ports:
      - 6379:6379
    volumes:
      - ./volumes/logs:/logs:rw
      - ./volumes/redis:/etc/redis/data:rw
      - ./redis/redis.conf:/etc/redis/redis.conf

  influxdb:
    image: influxdb:1.8.6-alpine
    ports:
      - 8086:8086
    environment:
      - INFLUXDB_DATA_MAX_VALUES_PER_TAG=0
    volumes:
      - ./volumes/influx/influx.config:/root/influxdb/influxdb.conf
      - ./volumes/influxdb:/var/lib/influxdb:rw

  maria:
    image: mariadb:10
    ports:
      - 3306:3306
    volumes:
      - ./volumes/logs/mariadb:/var/log/:rw
      - ./volumes/mariadb/:/var/lib/mysql/:rw
    environment:
      MYSQL_ROOT_PASSWORD: docker
      MYSQL_USER: docker
      MYSQL_PASSWORD: docker
      MYSQL_DATABASE: docker

  postgresql-master:
    image: bitnami/postgresql:12
    ports:
      - 15432:5432
    volumes:
      - ./volumes/pg-master:/bitnami/postgresql:rw
      # - ./volumes/pg-master/postgresql.conf:/opt/bitnami/postgresql/conf/postgresql.conf
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=docker_r
      - POSTGRESQL_REPLICATION_PASSWORD=docker_r
      - POSTGRESQL_USERNAME=docker
      - POSTGRESQL_PASSWORD=docker
      - POSTGRESQL_DATABASE=docker
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_SYNCHRONOUS_COMMIT_MODE=remote_apply
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - BITNAMI_DEBUG=true
      - POSTGRESQL_LOG_DIR=/bitnami/postgresql/logs
  postgresql-slave:
    image: bitnami/postgresql:12
    ports:
      - 15433:5432
    depends_on:
      - postgresql-master
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=docker_r
      - POSTGRESQL_REPLICATION_PASSWORD=docker_r
      - POSTGRESQL_MASTER_HOST=postgresql-master
      - POSTGRESQL_PASSWORD=docker
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes
      - BITNAMI_DEBUG=true

  mongo:
    image: mongo
    # restart: unless-stopped
    ports:
      - 27017:27017

  # Monitorear
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.39.2
    privileged: true
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    networks:
      - monitor-net

  prometheus:
    image: prom/prometheus:v2.27.1
    volumes:
      - ./volumes/prometheus:/etc/prometheus
      - ./volumes/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    # restart: unless-stopped
    ports:
      - 9090:9090
    networks:
      - monitor-net

  grafana:
    image: grafana/grafana:8.0.3
    container_name: grafana
    volumes:
      - ./volumes/grafana_data:/var/lib/grafana
      - ./volumes/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./volumes/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=true
    # restart: unless-stopped
    ports:
      - 8881:3000
    networks:
      - monitor-net

  nodeexporter:
    image: prom/node-exporter:v1.1.2
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    # restart: unless-stopped
    ports:
      - 9100:9100
    networks:
      - monitor-net

  sqs:
    image: softwaremill/elasticmq-native:1.3.3
    ports:
      - 9324:9324
      - 9325:9325
    # restart: unless-stopped
    volumes:
      - ./volumes/sqs/elasticmq.conf:/opt/elasticmq.conf

  motioneye:
    container_name: motioneye
    image: ccrisan/motioneye:master-amd64  # Change to ccrisan/motioneye:master-armhf for ARM chips (Pi etc.)
    ports:
      - "8081:8081"
      - "8765:8765"
    volumes:
      - ./volumes/camera/etc:/etc/motioneye
      - ./volumes/camera/data:/var/lib/motioneye
    restart: unless-stopped
    cpus: 16
    mem_limit: 6g

  flexget:
    image: flexget/flexget:3.7.8
    container_name: flexget
    command:
      - daemon
      - start
      - --autoreload-config
    volumes:
      - ./volumes/Torrents/.flexget:/config
    environment:
      - PUID=1000
      - GUID=1000
      - USERID=1000
      - GROUPID=1000
    cpus: 4
    mem_limit: 1g
    restart: unless-stopped
    healthcheck:
      test: 'if [[ "$(flexget daemon status)" == *"Daemon running"* ]]; then echo 0; else (rm /config/.config-lock && echo 1); fi'
      interval: 10m
      timeout: 5s
      retries: 50

  transmission:
    image: linuxserver/transmission:4.0.3
    container_name: transmission
    env_file:
      - ./volumes/Torrents/.transmission-daemon/.env
    volumes:
      - ./volumes/Torrents/.transmission-daemon:/config
      - ./volumes/Torrents:/Torrents
      - ./volumes/common:/common:ro
    ports:
      - 9091:9091
      - 51412:51412
      - 51412:51412/udp
    restart: unless-stopped

  samba:
    image: dperson/samba
    container_name: samba
    command: '-p -s "public;/mount;yes;no;yes"'
    environment:
      - USERID=1000
      - GROUPID=1000
    ports:
      - "137:137/udp"
      - "138:138/udp"
      - "139:139/tcp"
      - "445:445/tcp"
    volumes:
      - ./volumes/Torrents:/mount:rw
    restart: unless-stopped

  jdown:
    image: jlesage/jdownloader-2
    container_name: jdownloader
    ports:
      - 5800:5800
    volumes:
      - ./volumes/jdownloader:/config:rw
      - ./volumes/Downloads:/output:rw

networks:
  monitor-net:
    driver: bridge
